// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: room.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace Msg {

  #region Enums
  /// <summary>
  ///进入第一个房间
  ///列出房间列表
  ///进入选定房间
  ///邀请account进入房间
  ///列出关注列表
  ///退出房间
  ///永远都有一个房间
  /// </summary>
  public enum ROOM_MSG_TYPE {
    RmDefault = 0,
    RmKeepAlive = 1,
    /// <summary>
    /// SM_CHALLENGE ->
    /// </summary>
    RmEnterRequest = 1001,
    /// <summary>
    /// SM_CHALLENGE ->
    /// </summary>
    RmEnterResponse = 1005,
    RmEnterRoomCommand = 1010,
    RmQueryRoomRequest = 1020,
    RmQueryRoomResponse = 1025,
    RmRoomData = 1030,
    RmRoomPlayerData = 1040,
    RmRoomPositionData = 1050,
    RmListRoomRequest = 1060,
    RmListRoomResponse = 1065,
    RmCurrentRoomRequest = 1067,
    RmCurrentRoomResponse = 1068,
    RmCurrentRoomData = 1070,
    RmJoinRoomRequest = 1080,
    RmJoinRoomResponse = 1085,
    RmInviteRoomCommand = 1090,
    RmInviteRoomRequest = 1095,
    RmInviteRoomResponse = 1097,
    RmCreateRoomRequest = 1100,
    RmCreateRoomResponse = 1110,
    RmQuitRoomRequest = 1120,
    RmQuitRoomResponse = 1130,
    RmRoomMoveData = 1140,
    RmLoadReadyRequest = 1150,
    RmLoadReadyResponse = 1160,
    RmKeepaliveRequest = 1190,
    RmKeepaliveResponse = 1200,
    RmLookRequest = 1210,
    RmLookResponse = 1220,
    RmLookData = 1230,
    /// <summary>
    ///设置房间密码
    /// </summary>
    RmSetPasswordRequest = 1240,
    RmSetPasswordResponse = 1250,
    RmSetRoomTypeRequest = 1260,
    RmSetRoomTypeResponse = 1270,
    RmPackData = 1280,
    RmKickRequest = 1290,
    RmKickResponse = 1300,
    RmKickCommand = 1310,
    RmQuitCommand = 1320,
    RmSetRoomPublicTypeRequest = 1330,
    RmSetRoomPublicTypeResponse = 1340,
    RmAoiData = 1350,
    RmMoveRequest = 1360,
    RmMoveResponse = 1370,
    RmClientMoveRequest = 1380,
    RmClientMoveResponse = 1390,
    RmClientMoveData = 1400,
    RmClientAnimationRequest = 1410,
    RmClientAnimationResponse = 1420,
    RmClientAnimationData = 1430,
    RmServerMoveRequest = 1440,
    RmServerMoveResponse = 1450,
    RmServerMoveData = 1460,
    /// <summary>
    ///主持人清场功能
    /// </summary>
    RmClearRoomRequest = 1470,
    RmClearRoomResponse = 1480,
    RmClearRoomData = 1490,
    /// <summary>
    ///主持人踢人功能
    /// </summary>
    RmOutRoomRequest = 1500,
    RmOutRoomResponse = 1510,
    RmOutRoomData = 1520,
    /// <summary>
    ///主持人禁言功能
    /// </summary>
    RmForbiddenWordRoomRequest = 1530,
    RmForbiddenWordRoomResponse = 1540,
    RmForbiddenWordRoomData = 1550,
    /// <summary>
    ///修改房间名字
    /// </summary>
    RmSetRoomNameRequest = 1560,
    RmSetRoomNameResponse = 1570,
    RmJoinRoomMemberData = 1585,
    RmQuitRoomMemberData = 1590,
    RmOnlineRequest = 1600,
    RmOnlineResponse = 1610,
    RmOfflineRequest = 1620,
    RmOfflineResponse = 1630,
    RmSetRoomLocationRequest = 1640,
    RmSetRoomLocationResponse = 1650,
    RmSelfReportTempRequest = 1660,
    RmSelfReportTempResponse = 1670,
    /// <summary>
    ///加入房间推送
    /// </summary>
    RmJoinCommand = 1680,
  }

  #endregion

  #region Messages
  public sealed class StandardResponse : pb::IMessage {
    private static readonly pb::MessageParser<StandardResponse> _parser = new pb::MessageParser<StandardResponse>(() => new StandardResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 1;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 2;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RetCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrMsg = input.ReadString();
            break;
          }
          case 16: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class StandardRequest : pb::IMessage {
    private static readonly pb::MessageParser<StandardRequest> _parser = new pb::MessageParser<StandardRequest>(() => new StandardRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StandardRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///一开始进入，发起请求
  /// </summary>
  public sealed class IdRequest : pb::IMessage {
    private static readonly pb::MessageParser<IdRequest> _parser = new pb::MessageParser<IdRequest>(() => new IdRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IdRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器通知客户端，加载资源，进入房间，目前就一个资源，无视resID直接加载就好
  /// </summary>
  public sealed class EnterRoomCommand : pb::IMessage {
    private static readonly pb::MessageParser<EnterRoomCommand> _parser = new pb::MessageParser<EnterRoomCommand>(() => new EnterRoomCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 2;
    private string roomType_ = "";
    /// <summary>
    ///room类型
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 3;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomResId" field.</summary>
    public const int RoomResIdFieldNumber = 4;
    private string roomResId_ = "";
    /// <summary>
    ///room资源id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomResId {
      get { return roomResId_; }
      set {
        roomResId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 5;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomDescription" field.</summary>
    public const int RoomDescriptionFieldNumber = 6;
    private string roomDescription_ = "";
    /// <summary>
    ///房间概述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomDescription {
      get { return roomDescription_; }
      set {
        roomDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomPlayerNum" field.</summary>
    public const int RoomPlayerNumFieldNumber = 7;
    private int roomPlayerNum_;
    /// <summary>
    ///房间人数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomPlayerNum {
      get { return roomPlayerNum_; }
      set {
        roomPlayerNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomType);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomId);
      }
      if (RoomResId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomResId);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomName);
      }
      if (RoomDescription.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(RoomDescription);
      }
      if (RoomPlayerNum != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RoomPlayerNum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RoomResId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomResId);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomDescription);
      }
      if (RoomPlayerNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomPlayerNum);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomType = input.ReadString();
            break;
          }
          case 26: {
            RoomId = input.ReadString();
            break;
          }
          case 34: {
            RoomResId = input.ReadString();
            break;
          }
          case 42: {
            RoomName = input.ReadString();
            break;
          }
          case 50: {
            RoomDescription = input.ReadString();
            break;
          }
          case 56: {
            RoomPlayerNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class AoiData : pb::IMessage {
    private static readonly pb::MessageParser<AoiData> _parser = new pb::MessageParser<AoiData>(() => new AoiData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AoiData> Parser { get { return _parser; } }

    /// <summary>Field number for the "aoiMap" field.</summary>
    public const int AoiMapFieldNumber = 9;
    private static readonly pbc::MapField<string, bool>.Codec _map_aoiMap_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 74);
    private readonly pbc::MapField<string, bool> aoiMap_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> AoiMap {
      get { return aoiMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      aoiMap_.WriteTo(output, _map_aoiMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += aoiMap_.CalculateSize(_map_aoiMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 74: {
            aoiMap_.AddEntriesFrom(input, _map_aoiMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器收到QueryRoom推送RoomData,有角色信息，客户端加载角色模型
  /// </summary>
  public sealed class RoomData : pb::IMessage {
    private static readonly pb::MessageParser<RoomData> _parser = new pb::MessageParser<RoomData>(() => new RoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 3;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomDescription" field.</summary>
    public const int RoomDescriptionFieldNumber = 4;
    private string roomDescription_ = "";
    /// <summary>
    ///房间概述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomDescription {
      get { return roomDescription_; }
      set {
        roomDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 5;
    private string roomType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomPublicType" field.</summary>
    public const int RoomPublicTypeFieldNumber = 6;
    private int roomPublicType_;
    /// <summary>
    ///0公开 1邀请 2密码
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomPublicType {
      get { return roomPublicType_; }
      set {
        roomPublicType_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 7;
    private int max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 8;
    private int current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    /// <summary>Field number for the "owner" field.</summary>
    public const int OwnerFieldNumber = 9;
    private bool owner_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Owner {
      get { return owner_; }
      set {
        owner_ = value;
      }
    }

    /// <summary>Field number for the "playerMap" field.</summary>
    public const int PlayerMapFieldNumber = 11;
    private static readonly pbc::MapField<string, global::Msg.RoomPlayerData>.Codec _map_playerMap_codec
        = new pbc::MapField<string, global::Msg.RoomPlayerData>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.RoomPlayerData.Parser), 90);
    private readonly pbc::MapField<string, global::Msg.RoomPlayerData> playerMap_ = new pbc::MapField<string, global::Msg.RoomPlayerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.RoomPlayerData> PlayerMap {
      get { return playerMap_; }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 12;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomLocation" field.</summary>
    public const int RoomLocationFieldNumber = 13;
    private string roomLocation_ = "";
    /// <summary>
    ///房间位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomName);
      }
      if (RoomDescription.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomDescription);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomType);
      }
      if (RoomPublicType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RoomPublicType);
      }
      if (Max != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Max);
      }
      if (Current != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Current);
      }
      if (Owner != false) {
        output.WriteRawTag(72);
        output.WriteBool(Owner);
      }
      playerMap_.WriteTo(output, _map_playerMap_codec);
      if (Password.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Password);
      }
      if (RoomLocation.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RoomLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomDescription);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (RoomPublicType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomPublicType);
      }
      if (Max != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Max);
      }
      if (Current != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Current);
      }
      if (Owner != false) {
        size += 1 + 1;
      }
      size += playerMap_.CalculateSize(_map_playerMap_codec);
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (RoomLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            RoomName = input.ReadString();
            break;
          }
          case 34: {
            RoomDescription = input.ReadString();
            break;
          }
          case 42: {
            RoomType = input.ReadString();
            break;
          }
          case 48: {
            RoomPublicType = input.ReadInt32();
            break;
          }
          case 56: {
            Max = input.ReadInt32();
            break;
          }
          case 64: {
            Current = input.ReadInt32();
            break;
          }
          case 72: {
            Owner = input.ReadBool();
            break;
          }
          case 90: {
            playerMap_.AddEntriesFrom(input, _map_playerMap_codec);
            break;
          }
          case 98: {
            Password = input.ReadString();
            break;
          }
          case 106: {
            RoomLocation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色详细的信息位置，朝向，模型信息
  /// </summary>
  public sealed class RoomPlayerData : pb::IMessage {
    private static readonly pb::MessageParser<RoomPlayerData> _parser = new pb::MessageParser<RoomPlayerData>(() => new RoomPlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPlayerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 3;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "online" field.</summary>
    public const int OnlineFieldNumber = 4;
    private bool online_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Online {
      get { return online_; }
      set {
        online_ = value;
      }
    }

    /// <summary>Field number for the "lastUpdate" field.</summary>
    public const int LastUpdateFieldNumber = 5;
    private long lastUpdate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LastUpdate {
      get { return lastUpdate_; }
      set {
        lastUpdate_ = value;
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 6;
    private global::Msg.RoomPositionData position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomPositionData Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 7;
    private global::Msg.QuaternionData direction_;
    /// <summary>
    ///四元数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.QuaternionData Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 8;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userCode" field.</summary>
    public const int UserCodeFieldNumber = 9;
    private string userCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserCode {
      get { return userCode_; }
      set {
        userCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userAccount" field.</summary>
    public const int UserAccountFieldNumber = 10;
    private string userAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAccount {
      get { return userAccount_; }
      set {
        userAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar3d" field.</summary>
    public const int Avatar3DFieldNumber = 11;
    private string avatar3D_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar3D {
      get { return avatar3D_; }
      set {
        avatar3D_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar);
      }
      if (Online != false) {
        output.WriteRawTag(32);
        output.WriteBool(Online);
      }
      if (LastUpdate != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(LastUpdate);
      }
      if (position_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Direction);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UserName);
      }
      if (UserCode.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UserCode);
      }
      if (UserAccount.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(UserAccount);
      }
      if (Avatar3D.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Avatar3D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Online != false) {
        size += 1 + 1;
      }
      if (LastUpdate != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastUpdate);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserCode);
      }
      if (UserAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAccount);
      }
      if (Avatar3D.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar3D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            Avatar = input.ReadString();
            break;
          }
          case 32: {
            Online = input.ReadBool();
            break;
          }
          case 40: {
            LastUpdate = input.ReadInt64();
            break;
          }
          case 50: {
            if (position_ == null) {
              position_ = new global::Msg.RoomPositionData();
            }
            input.ReadMessage(position_);
            break;
          }
          case 58: {
            if (direction_ == null) {
              direction_ = new global::Msg.QuaternionData();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 66: {
            UserName = input.ReadString();
            break;
          }
          case 74: {
            UserCode = input.ReadString();
            break;
          }
          case 82: {
            UserAccount = input.ReadString();
            break;
          }
          case 90: {
            Avatar3D = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class MoveData : pb::IMessage {
    private static readonly pb::MessageParser<MoveData> _parser = new pb::MessageParser<MoveData>(() => new MoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::Msg.RoomPositionData position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomPositionData Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 3;
    private global::Msg.QuaternionData direction_;
    /// <summary>
    ///四元数
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.QuaternionData Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private int status_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Direction);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Status);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Status);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::Msg.RoomPositionData();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (direction_ == null) {
              direction_ = new global::Msg.QuaternionData();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 32: {
            Status = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///角色位置信息，local是相对坐标，暂时使用，global是wgs84坐标，后面要引入
  /// </summary>
  public sealed class RoomPositionData : pb::IMessage {
    private static readonly pb::MessageParser<RoomPositionData> _parser = new pb::MessageParser<RoomPositionData>(() => new RoomPositionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomPositionData> Parser { get { return _parser; } }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 2;
    private global::Msg.Vector3Data local_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 3;
    private global::Msg.Vector3Data global_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Global {
      get { return global_; }
      set {
        global_ = value;
      }
    }

    /// <summary>Field number for the "coordinate" field.</summary>
    public const int CoordinateFieldNumber = 4;
    private string coordinate_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Coordinate {
      get { return coordinate_; }
      set {
        coordinate_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (local_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Local);
      }
      if (global_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Global);
      }
      if (Coordinate.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Coordinate);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (local_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      if (global_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Global);
      }
      if (Coordinate.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Coordinate);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (local_ == null) {
              local_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(local_);
            break;
          }
          case 26: {
            if (global_ == null) {
              global_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(global_);
            break;
          }
          case 34: {
            Coordinate = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///坐标系三维坐标
  /// </summary>
  public sealed class Vector3Data : pb::IMessage {
    private static readonly pb::MessageParser<Vector3Data> _parser = new pb::MessageParser<Vector3Data>(() => new Vector3Data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector3Data> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class Vector2Data : pb::IMessage {
    private static readonly pb::MessageParser<Vector2Data> _parser = new pb::MessageParser<Vector2Data>(() => new Vector2Data());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vector2Data> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed class QuaternionData : pb::IMessage {
    private static readonly pb::MessageParser<QuaternionData> _parser = new pb::MessageParser<QuaternionData>(() => new QuaternionData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuaternionData> Parser { get { return _parser; } }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private double x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private double y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private double z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 4;
    private double w_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(X);
      }
      if (Y != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Y);
      }
      if (Z != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Z);
      }
      if (W != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(W);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0D) {
        size += 1 + 8;
      }
      if (Y != 0D) {
        size += 1 + 8;
      }
      if (Z != 0D) {
        size += 1 + 8;
      }
      if (W != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            X = input.ReadDouble();
            break;
          }
          case 17: {
            Y = input.ReadDouble();
            break;
          }
          case 25: {
            Z = input.ReadDouble();
            break;
          }
          case 33: {
            W = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///列出当前有的房间
  /// </summary>
  public sealed class ListRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<ListRoomRequest> _parser = new pb::MessageParser<ListRoomRequest>(() => new ListRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///端侧发送了ListRoom之后，服务器发送CurrentRoom信息
  /// </summary>
  public sealed class CurrentRoomsData : pb::IMessage {
    private static readonly pb::MessageParser<CurrentRoomsData> _parser = new pb::MessageParser<CurrentRoomsData>(() => new CurrentRoomsData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CurrentRoomsData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomMap" field.</summary>
    public const int RoomMapFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Msg.RoomData>.Codec _map_roomMap_codec
        = new pbc::MapField<string, global::Msg.RoomData>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.RoomData.Parser), 18);
    private readonly pbc::MapField<string, global::Msg.RoomData> roomMap_ = new pbc::MapField<string, global::Msg.RoomData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.RoomData> RoomMap {
      get { return roomMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomMap_.WriteTo(output, _map_roomMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomMap_.CalculateSize(_map_roomMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            roomMap_.AddEntriesFrom(input, _map_roomMap_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///RM_CURRENT_ROOM_DATA
  ///用户选择一个加入的房间，以房间号为参数
  /// </summary>
  public sealed class JoinRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<JoinRoomRequest> _parser = new pb::MessageParser<JoinRoomRequest>(() => new JoinRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JoinRoomRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///设置房间密码
  /// </summary>
  public sealed class SetPasswordRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetPasswordRequest> _parser = new pb::MessageParser<SetPasswordRequest>(() => new SetPasswordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPasswordRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 1;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Password.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SetPasswordResponse : pb::IMessage {
    private static readonly pb::MessageParser<SetPasswordResponse> _parser = new pb::MessageParser<SetPasswordResponse>(() => new SetPasswordResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetPasswordResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 1;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 2;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    /// <summary>Field number for the "password" field.</summary>
    public const int PasswordFieldNumber = 3;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RetCode);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Password);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            ErrMsg = input.ReadString();
            break;
          }
          case 16: {
            RetCode = input.ReadInt32();
            break;
          }
          case 26: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SetRoomTypeRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetRoomTypeRequest> _parser = new pb::MessageParser<SetRoomTypeRequest>(() => new SetRoomTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRoomTypeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 1;
    private int roomType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomType {
      get { return roomType_; }
      set {
        roomType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class SetRoomPublicTypeRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetRoomPublicTypeRequest> _parser = new pb::MessageParser<SetRoomPublicTypeRequest>(() => new SetRoomPublicTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRoomPublicTypeRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomPublicType" field.</summary>
    public const int RoomPublicTypeFieldNumber = 1;
    private int roomPublicType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomPublicType {
      get { return roomPublicType_; }
      set {
        roomPublicType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomPublicType != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomPublicType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomPublicType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomPublicType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomPublicType = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///一个用户邀请另一个用户，此时可能弹窗，提示房间信息和邀请人的信息
  /// </summary>
  public sealed class InviteRoomCommand : pb::IMessage {
    private static readonly pb::MessageParser<InviteRoomCommand> _parser = new pb::MessageParser<InviteRoomCommand>(() => new InviteRoomCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteRoomCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 3;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inviterName" field.</summary>
    public const int InviterNameFieldNumber = 4;
    private string inviterName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviterName {
      get { return inviterName_; }
      set {
        inviterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inviterAccount" field.</summary>
    public const int InviterAccountFieldNumber = 5;
    private string inviterAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InviterAccount {
      get { return inviterAccount_; }
      set {
        inviterAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (RoomName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomName);
      }
      if (InviterName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(InviterName);
      }
      if (InviterAccount.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(InviterAccount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (InviterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviterName);
      }
      if (InviterAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InviterAccount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 26: {
            RoomName = input.ReadString();
            break;
          }
          case 34: {
            InviterName = input.ReadString();
            break;
          }
          case 42: {
            InviterAccount = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class InviteRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<InviteRoomRequest> _parser = new pb::MessageParser<InviteRoomRequest>(() => new InviteRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteRoomRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 2;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class InviteRoomResponse : pb::IMessage {
    private static readonly pb::MessageParser<InviteRoomResponse> _parser = new pb::MessageParser<InviteRoomResponse>(() => new InviteRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InviteRoomResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 3;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RetCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 24: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// 用户创建一个新的房间，给房间一个简单描述
  /// </summary>
  public sealed class CreateRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<CreateRoomRequest> _parser = new pb::MessageParser<CreateRoomRequest>(() => new CreateRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomDescription" field.</summary>
    public const int RoomDescriptionFieldNumber = 3;
    private string roomDescription_ = "";
    /// <summary>
    ///房间概述
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomDescription {
      get { return roomDescription_; }
      set {
        roomDescription_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomType" field.</summary>
    public const int RoomTypeFieldNumber = 4;
    private string roomType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomType {
      get { return roomType_; }
      set {
        roomType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomLocation" field.</summary>
    public const int RoomLocationFieldNumber = 5;
    private string roomLocation_ = "";
    /// <summary>
    ///房间位置信息
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
      if (RoomDescription.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(RoomDescription);
      }
      if (RoomType.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RoomType);
      }
      if (RoomLocation.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(RoomLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomDescription.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomDescription);
      }
      if (RoomType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomType);
      }
      if (RoomLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomName = input.ReadString();
            break;
          }
          case 26: {
            RoomDescription = input.ReadString();
            break;
          }
          case 34: {
            RoomType = input.ReadString();
            break;
          }
          case 42: {
            RoomLocation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户申请离开房间
  /// </summary>
  public sealed class QuitRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<QuitRoomRequest> _parser = new pb::MessageParser<QuitRoomRequest>(() => new QuitRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuitRoomRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///quitroom的结果
  /// </summary>
  public sealed class QuitRoomResponse : pb::IMessage {
    private static readonly pb::MessageParser<QuitRoomResponse> _parser = new pb::MessageParser<QuitRoomResponse>(() => new QuitRoomResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuitRoomResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 3;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RetCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 24: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///用户的同步的位移信息
  /// </summary>
  public sealed class RoomMoveData : pb::IMessage {
    private static readonly pb::MessageParser<RoomMoveData> _parser = new pb::MessageParser<RoomMoveData>(() => new RoomMoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMoveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 2;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::Msg.RoomPositionData position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.RoomPositionData Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "direction" field.</summary>
    public const int DirectionFieldNumber = 4;
    private global::Msg.QuaternionData direction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.QuaternionData Direction {
      get { return direction_; }
      set {
        direction_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 5;
    private int state_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserId);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (direction_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Direction);
      }
      if (State != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(State);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (direction_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Direction);
      }
      if (State != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(State);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::Msg.RoomPositionData();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (direction_ == null) {
              direction_ = new global::Msg.QuaternionData();
            }
            input.ReadMessage(direction_);
            break;
          }
          case 40: {
            State = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class RegServerRequest : pb::IMessage {
    private static readonly pb::MessageParser<RegServerRequest> _parser = new pb::MessageParser<RegServerRequest>(() => new RegServerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegServerRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private string serverId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private string serviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerId);
      }
      if (ServiceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ServerId = input.ReadString();
            break;
          }
          case 26: {
            ServiceType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class RegServerResponse : pb::IMessage {
    private static readonly pb::MessageParser<RegServerResponse> _parser = new pb::MessageParser<RegServerResponse>(() => new RegServerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegServerResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 3;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RetCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 24: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class KeepaliveRequest : pb::IMessage {
    private static readonly pb::MessageParser<KeepaliveRequest> _parser = new pb::MessageParser<KeepaliveRequest>(() => new KeepaliveRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepaliveRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "serverId" field.</summary>
    public const int ServerIdFieldNumber = 2;
    private string serverId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServerId {
      get { return serverId_; }
      set {
        serverId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceType" field.</summary>
    public const int ServiceTypeFieldNumber = 3;
    private string serviceType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceType {
      get { return serviceType_; }
      set {
        serviceType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ServerId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServerId);
      }
      if (ServiceType.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServerId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServerId);
      }
      if (ServiceType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ServerId = input.ReadString();
            break;
          }
          case 26: {
            ServiceType = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class KeepaliveResponse : pb::IMessage {
    private static readonly pb::MessageParser<KeepaliveResponse> _parser = new pb::MessageParser<KeepaliveResponse>(() => new KeepaliveResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KeepaliveResponse> Parser { get { return _parser; } }

    /// <summary>Field number for the "errMsg" field.</summary>
    public const int ErrMsgFieldNumber = 2;
    private string errMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrMsg {
      get { return errMsg_; }
      set {
        errMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "retCode" field.</summary>
    public const int RetCodeFieldNumber = 3;
    private int retCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RetCode {
      get { return retCode_; }
      set {
        retCode_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ErrMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrMsg);
      }
      if (RetCode != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(RetCode);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ErrMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrMsg);
      }
      if (RetCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RetCode);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            ErrMsg = input.ReadString();
            break;
          }
          case 24: {
            RetCode = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed class LookData : pb::IMessage {
    private static readonly pb::MessageParser<LookData> _parser = new pb::MessageParser<LookData>(() => new LookData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "looks" field.</summary>
    public const int LooksFieldNumber = 2;
    private static readonly pbc::MapField<int, int>.Codec _map_looks_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 18);
    private readonly pbc::MapField<int, int> looks_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Looks {
      get { return looks_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      looks_.WriteTo(output, _map_looks_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      size += looks_.CalculateSize(_map_looks_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            looks_.AddEntriesFrom(input, _map_looks_codec);
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class LookRequest : pb::IMessage {
    private static readonly pb::MessageParser<LookRequest> _parser = new pb::MessageParser<LookRequest>(() => new LookRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LookRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "looks" field.</summary>
    public const int LooksFieldNumber = 1;
    private static readonly pbc::MapField<int, int>.Codec _map_looks_codec
        = new pbc::MapField<int, int>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForInt32(16), 10);
    private readonly pbc::MapField<int, int> looks_ = new pbc::MapField<int, int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, int> Looks {
      get { return looks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      looks_.WriteTo(output, _map_looks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += looks_.CalculateSize(_map_looks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            looks_.AddEntriesFrom(input, _map_looks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PoseData : pb::IMessage {
    private static readonly pb::MessageParser<PoseData> _parser = new pb::MessageParser<PoseData>(() => new PoseData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoseData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "poses" field.</summary>
    public const int PosesFieldNumber = 2;
    private static readonly pbc::MapField<int, double>.Codec _map_poses_codec
        = new pbc::MapField<int, double>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForDouble(17), 18);
    private readonly pbc::MapField<int, double> poses_ = new pbc::MapField<int, double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, double> Poses {
      get { return poses_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      poses_.WriteTo(output, _map_poses_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      size += poses_.CalculateSize(_map_poses_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            poses_.AddEntriesFrom(input, _map_poses_codec);
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class PoseRequest : pb::IMessage {
    private static readonly pb::MessageParser<PoseRequest> _parser = new pb::MessageParser<PoseRequest>(() => new PoseRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoseRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "poses" field.</summary>
    public const int PosesFieldNumber = 1;
    private static readonly pbc::MapField<int, double>.Codec _map_poses_codec
        = new pbc::MapField<int, double>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForDouble(17), 10);
    private readonly pbc::MapField<int, double> poses_ = new pbc::MapField<int, double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, double> Poses {
      get { return poses_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      poses_.WriteTo(output, _map_poses_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += poses_.CalculateSize(_map_poses_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            poses_.AddEntriesFrom(input, _map_poses_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PackData : pb::IMessage {
    private static readonly pb::MessageParser<PackData> _parser = new pb::MessageParser<PackData>(() => new PackData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PackData> Parser { get { return _parser; } }

    /// <summary>Field number for the "poses" field.</summary>
    public const int PosesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Msg.PoseData> _repeated_poses_codec
        = pb::FieldCodec.ForMessage(10, global::Msg.PoseData.Parser);
    private readonly pbc::RepeatedField<global::Msg.PoseData> poses_ = new pbc::RepeatedField<global::Msg.PoseData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.PoseData> Poses {
      get { return poses_; }
    }

    /// <summary>Field number for the "looks" field.</summary>
    public const int LooksFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Msg.LookData> _repeated_looks_codec
        = pb::FieldCodec.ForMessage(18, global::Msg.LookData.Parser);
    private readonly pbc::RepeatedField<global::Msg.LookData> looks_ = new pbc::RepeatedField<global::Msg.LookData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Msg.LookData> Looks {
      get { return looks_; }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 3;
    private long timestamp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      poses_.WriteTo(output, _repeated_poses_codec);
      looks_.WriteTo(output, _repeated_looks_codec);
      if (Timestamp != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Timestamp);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += poses_.CalculateSize(_repeated_poses_codec);
      size += looks_.CalculateSize(_repeated_looks_codec);
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            poses_.AddEntriesFrom(input, _repeated_poses_codec);
            break;
          }
          case 18: {
            looks_.AddEntriesFrom(input, _repeated_looks_codec);
            break;
          }
          case 24: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public sealed class KickRequest : pb::IMessage {
    private static readonly pb::MessageParser<KickRequest> _parser = new pb::MessageParser<KickRequest>(() => new KickRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "kicks" field.</summary>
    public const int KicksFieldNumber = 1;
    private static readonly pbc::MapField<string, bool>.Codec _map_kicks_codec
        = new pbc::MapField<string, bool>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForBool(16), 10);
    private readonly pbc::MapField<string, bool> kicks_ = new pbc::MapField<string, bool>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, bool> Kicks {
      get { return kicks_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      kicks_.WriteTo(output, _map_kicks_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += kicks_.CalculateSize(_map_kicks_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            kicks_.AddEntriesFrom(input, _map_kicks_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class KickCommand : pb::IMessage {
    private static readonly pb::MessageParser<KickCommand> _parser = new pb::MessageParser<KickCommand>(() => new KickCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KickCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class QuitCommand : pb::IMessage {
    private static readonly pb::MessageParser<QuitCommand> _parser = new pb::MessageParser<QuitCommand>(() => new QuitCommand());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QuitCommand> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 2;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class ClientMoveData : pb::IMessage {
    private static readonly pb::MessageParser<ClientMoveData> _parser = new pb::MessageParser<ClientMoveData>(() => new ClientMoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientMoveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Msg.Vector3Data pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 3;
    private global::Msg.Vector3Data rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "moveSpeed" field.</summary>
    public const int MoveSpeedFieldNumber = 4;
    private float moveSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MoveSpeed {
      get { return moveSpeed_; }
      set {
        moveSpeed_ = value;
      }
    }

    /// <summary>Field number for the "isMove" field.</summary>
    public const int IsMoveFieldNumber = 5;
    private bool isMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsMove {
      get { return isMove_; }
      set {
        isMove_ = value;
      }
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 6;
    private global::Msg.Vector3Data global_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Global {
      get { return global_; }
      set {
        global_ = value;
      }
    }

    /// <summary>Field number for the "deltaTime" field.</summary>
    public const int DeltaTimeFieldNumber = 7;
    private float deltaTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeltaTime {
      get { return deltaTime_; }
      set {
        deltaTime_ = value;
      }
    }

    /// <summary>Field number for the "realtimeSinceStartup" field.</summary>
    public const int RealtimeSinceStartupFieldNumber = 8;
    private float realtimeSinceStartup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealtimeSinceStartup {
      get { return realtimeSinceStartup_; }
      set {
        realtimeSinceStartup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (rotate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotate);
      }
      if (MoveSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MoveSpeed);
      }
      if (IsMove != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsMove);
      }
      if (global_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Global);
      }
      if (DeltaTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(DeltaTime);
      }
      if (RealtimeSinceStartup != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(RealtimeSinceStartup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rotate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (MoveSpeed != 0F) {
        size += 1 + 4;
      }
      if (IsMove != false) {
        size += 1 + 1;
      }
      if (global_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Global);
      }
      if (DeltaTime != 0F) {
        size += 1 + 4;
      }
      if (RealtimeSinceStartup != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (rotate_ == null) {
              rotate_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(rotate_);
            break;
          }
          case 37: {
            MoveSpeed = input.ReadFloat();
            break;
          }
          case 40: {
            IsMove = input.ReadBool();
            break;
          }
          case 50: {
            if (global_ == null) {
              global_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(global_);
            break;
          }
          case 61: {
            DeltaTime = input.ReadFloat();
            break;
          }
          case 69: {
            RealtimeSinceStartup = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed class ClientAnimationData : pb::IMessage {
    private static readonly pb::MessageParser<ClientAnimationData> _parser = new pb::MessageParser<ClientAnimationData>(() => new ClientAnimationData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientAnimationData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "normalizedTime" field.</summary>
    public const int NormalizedTimeFieldNumber = 2;
    private float normalizedTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NormalizedTime {
      get { return normalizedTime_; }
      set {
        normalizedTime_ = value;
      }
    }

    /// <summary>Field number for the "animConditions" field.</summary>
    public const int AnimConditionsFieldNumber = 3;
    private string animConditions_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimConditions {
      get { return animConditions_; }
      set {
        animConditions_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "animName" field.</summary>
    public const int AnimNameFieldNumber = 4;
    private string animName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AnimName {
      get { return animName_; }
      set {
        animName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (NormalizedTime != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(NormalizedTime);
      }
      if (AnimConditions.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AnimConditions);
      }
      if (AnimName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AnimName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (NormalizedTime != 0F) {
        size += 1 + 4;
      }
      if (AnimConditions.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimConditions);
      }
      if (AnimName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AnimName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 21: {
            NormalizedTime = input.ReadFloat();
            break;
          }
          case 26: {
            AnimConditions = input.ReadString();
            break;
          }
          case 34: {
            AnimName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class ServerMoveData : pb::IMessage {
    private static readonly pb::MessageParser<ServerMoveData> _parser = new pb::MessageParser<ServerMoveData>(() => new ServerMoveData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerMoveData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userID" field.</summary>
    public const int UserIDFieldNumber = 1;
    private string userID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserID {
      get { return userID_; }
      set {
        userID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pos" field.</summary>
    public const int PosFieldNumber = 2;
    private global::Msg.Vector3Data pos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Pos {
      get { return pos_; }
      set {
        pos_ = value;
      }
    }

    /// <summary>Field number for the "rotate" field.</summary>
    public const int RotateFieldNumber = 3;
    private global::Msg.Vector3Data rotate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Rotate {
      get { return rotate_; }
      set {
        rotate_ = value;
      }
    }

    /// <summary>Field number for the "global" field.</summary>
    public const int GlobalFieldNumber = 4;
    private global::Msg.Vector3Data global_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Msg.Vector3Data Global {
      get { return global_; }
      set {
        global_ = value;
      }
    }

    /// <summary>Field number for the "realtimeSinceStartup" field.</summary>
    public const int RealtimeSinceStartupFieldNumber = 5;
    private float realtimeSinceStartup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RealtimeSinceStartup {
      get { return realtimeSinceStartup_; }
      set {
        realtimeSinceStartup_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserID);
      }
      if (pos_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Pos);
      }
      if (rotate_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotate);
      }
      if (global_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Global);
      }
      if (RealtimeSinceStartup != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(RealtimeSinceStartup);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserID);
      }
      if (pos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
      }
      if (rotate_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotate);
      }
      if (global_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Global);
      }
      if (RealtimeSinceStartup != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserID = input.ReadString();
            break;
          }
          case 18: {
            if (pos_ == null) {
              pos_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(pos_);
            break;
          }
          case 26: {
            if (rotate_ == null) {
              rotate_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(rotate_);
            break;
          }
          case 34: {
            if (global_ == null) {
              global_ = new global::Msg.Vector3Data();
            }
            input.ReadMessage(global_);
            break;
          }
          case 45: {
            RealtimeSinceStartup = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房主踢人
  /// </summary>
  public sealed class PlayerGetOutRoomRequest : pb::IMessage {
    private static readonly pb::MessageParser<PlayerGetOutRoomRequest> _parser = new pb::MessageParser<PlayerGetOutRoomRequest>(() => new PlayerGetOutRoomRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerGetOutRoomRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///房主禁言
  /// </summary>
  public sealed class PlayerForbiddenWordRequest : pb::IMessage {
    private static readonly pb::MessageParser<PlayerForbiddenWordRequest> _parser = new pb::MessageParser<PlayerForbiddenWordRequest>(() => new PlayerForbiddenWordRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerForbiddenWordRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "forbidWord" field.</summary>
    public const int ForbidWordFieldNumber = 3;
    private bool forbidWord_;
    /// <summary>
    ///false 禁言 true 取消禁言
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForbidWord {
      get { return forbidWord_; }
      set {
        forbidWord_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (RoomId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomId);
      }
      if (ForbidWord != false) {
        output.WriteRawTag(24);
        output.WriteBool(ForbidWord);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      if (ForbidWord != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            RoomId = input.ReadString();
            break;
          }
          case 24: {
            ForbidWord = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改房间名字
  /// </summary>
  public sealed class SetRoomNameRequest : pb::IMessage {
    private static readonly pb::MessageParser<SetRoomNameRequest> _parser = new pb::MessageParser<SetRoomNameRequest>(() => new SetRoomNameRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetRoomNameRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 2;
    private string roomName_ = "";
    /// <summary>
    ///房间名称
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(RoomName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            RoomName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///服务器收到QueryRoom推送RoomData,有角色信息，客户端加载角色模型
  /// </summary>
  public sealed class RoomMemberData : pb::IMessage {
    private static readonly pb::MessageParser<RoomMemberData> _parser = new pb::MessageParser<RoomMemberData>(() => new RoomMemberData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomMemberData> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private string roomId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomId {
      get { return roomId_; }
      set {
        roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "playerMap" field.</summary>
    public const int PlayerMapFieldNumber = 2;
    private static readonly pbc::MapField<string, global::Msg.PlayerData>.Codec _map_playerMap_codec
        = new pbc::MapField<string, global::Msg.PlayerData>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForMessage(18, global::Msg.PlayerData.Parser), 18);
    private readonly pbc::MapField<string, global::Msg.PlayerData> playerMap_ = new pbc::MapField<string, global::Msg.PlayerData>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Msg.PlayerData> PlayerMap {
      get { return playerMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomId);
      }
      playerMap_.WriteTo(output, _map_playerMap_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
      }
      size += playerMap_.CalculateSize(_map_playerMap_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomId = input.ReadString();
            break;
          }
          case 18: {
            playerMap_.AddEntriesFrom(input, _map_playerMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed class PlayerData : pb::IMessage {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 2;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userCode" field.</summary>
    public const int UserCodeFieldNumber = 4;
    private string userCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserCode {
      get { return userCode_; }
      set {
        userCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userAccount" field.</summary>
    public const int UserAccountFieldNumber = 5;
    private string userAccount_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserAccount {
      get { return userAccount_; }
      set {
        userAccount_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar3d" field.</summary>
    public const int Avatar3DFieldNumber = 6;
    private string avatar3D_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar3D {
      get { return avatar3D_; }
      set {
        avatar3D_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Avatar);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
      if (UserCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserCode);
      }
      if (UserAccount.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UserAccount);
      }
      if (Avatar3D.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Avatar3D);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (UserCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserCode);
      }
      if (UserAccount.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAccount);
      }
      if (Avatar3D.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar3D);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 18: {
            Avatar = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
          case 34: {
            UserCode = input.ReadString();
            break;
          }
          case 42: {
            UserAccount = input.ReadString();
            break;
          }
          case 50: {
            Avatar3D = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///修改房间地理位置 RoomLocationRequest
  /// </summary>
  public sealed class RoomLocationRequest : pb::IMessage {
    private static readonly pb::MessageParser<RoomLocationRequest> _parser = new pb::MessageParser<RoomLocationRequest>(() => new RoomLocationRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomLocationRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "roomLocation" field.</summary>
    public const int RoomLocationFieldNumber = 1;
    private string roomLocation_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomLocation {
      get { return roomLocation_; }
      set {
        roomLocation_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomLocation.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomLocation);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomLocation.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomLocation);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomLocation = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class SelfReportTempRequest : pb::IMessage {
    private static readonly pb::MessageParser<SelfReportTempRequest> _parser = new pb::MessageParser<SelfReportTempRequest>(() => new SelfReportTempRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelfReportTempRequest> Parser { get { return _parser; } }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 1;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 2;
    private string avatar_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar {
      get { return avatar_; }
      set {
        avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "avatar3d" field.</summary>
    public const int Avatar3DFieldNumber = 3;
    private string avatar3D_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Avatar3D {
      get { return avatar3D_; }
      set {
        avatar3D_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userCode" field.</summary>
    public const int UserCodeFieldNumber = 4;
    private string userCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserCode {
      get { return userCode_; }
      set {
        userCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "account" field.</summary>
    public const int AccountFieldNumber = 6;
    private string account_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserName);
      }
      if (Avatar.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Avatar);
      }
      if (Avatar3D.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Avatar3D);
      }
      if (UserCode.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(UserCode);
      }
      if (Account.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Account);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      if (Avatar.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar);
      }
      if (Avatar3D.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Avatar3D);
      }
      if (UserCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserCode);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserName = input.ReadString();
            break;
          }
          case 18: {
            Avatar = input.ReadString();
            break;
          }
          case 26: {
            Avatar3D = input.ReadString();
            break;
          }
          case 34: {
            UserCode = input.ReadString();
            break;
          }
          case 50: {
            Account = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed class JOINRoomData : pb::IMessage {
    private static readonly pb::MessageParser<JOINRoomData> _parser = new pb::MessageParser<JOINRoomData>(() => new JOINRoomData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JOINRoomData> Parser { get { return _parser; } }

    /// <summary>Field number for the "userId" field.</summary>
    public const int UserIdFieldNumber = 1;
    private string userId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserId {
      get { return userId_; }
      set {
        userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "userName" field.</summary>
    public const int UserNameFieldNumber = 3;
    private string userName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserName {
      get { return userName_; }
      set {
        userName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(UserId);
      }
      if (UserName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(UserName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UserId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
      }
      if (UserName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            UserId = input.ReadString();
            break;
          }
          case 26: {
            UserName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
